name: Build Modular RSS Server Image

permissions:
  contents: read
  packages: write

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-images:
    strategy:
      matrix:
        arch:
          - { runner: ubuntu-latest, arch: x86_64, docker_platform: linux/amd64, suffix: amd64 }
          - { runner: ubuntu-24.04-arm, arch: aarch64, docker_platform: linux/arm64, suffix: arm64 }

    runs-on: ${{ matrix.arch.runner }}

    steps:
      - uses: actions/checkout@v3

      - uses: actions/checkout@v3             
        with:
          repository: chainguard-dev/melange
          path: melange-src

      - uses: actions/checkout@v3             
        with:
          repository: wolfi-dev/os
          path: wolfi-os

      - name: Setup CLI Tools (melange, apko, yq)
        run: |
          sudo apt-get update && sudo apt-get install -y jq parallel

          install_latest_release() {
            TOOL_NAME=$1
            GH_REPO=$2

            # Map architecture to GitHub release naming
            if [ "${{ matrix.arch.arch }}" = "x86_64" ]; then
              ARCH="linux_amd64"
            elif [ "${{ matrix.arch.arch }}" = "aarch64" ]; then
              ARCH="linux_arm64"
            else
              echo "Unsupported architecture: ${{ matrix.arch.arch }}"
              exit 1
            fi

            echo "Fetching latest release for $TOOL_NAME ($ARCH)..."
            LATEST=$(curl -s https://api.github.com/repos/${GH_REPO}/releases/latest | jq -r '.tag_name')

            if [ "$TOOL_NAME" = "yq" ]; then
              ASSET="yq_${ARCH}"
              URL="https://github.com/${GH_REPO}/releases/download/${LATEST}/${ASSET}"
              OUT="${ASSET}"
              curl -sL "$URL" -o "$OUT"
              chmod +x "${OUT}"
              sudo install -m0755 "${OUT}" /usr/local/bin/yq
            else
              ASSET="${TOOL_NAME}_${LATEST#v}_${ARCH}.tar.gz"
              URL="https://github.com/${GH_REPO}/releases/download/${LATEST}/${ASSET}"
              OUT="${TOOL_NAME}.tar.gz"
              curl -sL "$URL" -o "$OUT"
              tar -xzf "$OUT"
              sudo install -m0755 $(find . -type f -name "$TOOL_NAME" -executable) /usr/local/bin/$TOOL_NAME
            fi

            echo "âœ… Installed $TOOL_NAME to /usr/local/bin"
          }

          install_latest_release apko chainguard-dev/apko
          install_latest_release yq mikefarah/yq

      - name: Checkout melange stable version
        run: |
          cd melange-src
          git fetch --tags
          git checkout v0.23.10          

      - name: Merge pipelines & build melange
        run: |
          cp -r wolfi-os/pipelines/py melange-src/pkg/build/pipelines/
          cd melange-src
          go build -o melange .
          sudo mv melange /usr/local/bin/melange

      - name: Verify CLI tools
        run: |
          command -v melange && melange version
          command -v apko && apko version
          command -v yq && yq --version

      - name: Generate signing key
        run: |
          melange keygen melange/melange.rsa

      - name: Build packages
        run: |
          mkdir -p packages/${{ matrix.arch.arch }}
          find melange -name '*.yaml' | parallel -j 3 '
            melange build {} --source-dir . \
              --arch ${{ matrix.arch.arch }} \
              --out-dir packages \
              --signing-key melange/melange.rsa \
              --runner docker || true
          '

      - name: Build container image
        run: |
          APKO_RUNNER=none apko build \
            --arch ${{ matrix.arch.arch }} \
            apko/apko.yaml \
            ghcr.io/${{ github.repository_owner }}/rss-server \
            rss-server-${{ matrix.arch.suffix }}.tar

      - name: Load container image
        run: docker load < rss-server-${{ matrix.arch.suffix }}.tar

      - name: Test container image
        run: |
          CONTAINER_ID=$(docker run -d --platform=${{ matrix.arch.docker_platform }} ghcr.io/${{ github.repository_owner }}/rss-server:latest-${{ matrix.arch.suffix }})
          sleep 5
          docker logs $CONTAINER_ID
          docker rm -f $CONTAINER_ID

      - name: Push architecture image
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/${{ github.repository_owner }}/rss-server:latest-${{ matrix.arch.suffix }}

  manifest:
    needs: build-images
    runs-on: ubuntu-latest

    steps:
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create multi-arch manifest
        run: |
          docker buildx imagetools create \
            --tag ghcr.io/${{ github.repository_owner }}/rss-server:latest \
            ghcr.io/${{ github.repository_owner }}/rss-server:latest-amd64 \
            ghcr.io/${{ github.repository_owner }}/rss-server:latest-arm64
